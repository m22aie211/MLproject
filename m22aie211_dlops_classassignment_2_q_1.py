# -*- coding: utf-8 -*-
"""M22AIE211_DLOps_ClassAssignment_2_Q_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Hg33KWkpxuaM6NKtlOT6D6q5Um2Hj5Ro
"""

import torch
import torch.nn as nn
import torch.optim as optim
import torchvision.transforms as transforms
from torch.utils.data import DataLoader
from sklearn.metrics import accuracy_score, precision_score, recall_score, confusion_matrix
from torch.utils.tensorboard import SummaryWriter
from torchvision.datasets import USPS
import matplotlib.pyplot as plt
import numpy as np

transform = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.5,), (0.5,))
])

#Loading the Data Sets

train_dataset = USPS(root='./data', train=True, download=True, transform=transform)
test_dataset = USPS(root='./data', train=False, download=True, transform=transform)

# Defined the data loaders
train_loader = DataLoader(train_dataset, batch_size=64, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=64, shuffle=False)

# MLP Model
class MLP(nn.Module):
    def __init__(self):
        super(MLP, self).__init__()
        self.fc1 = nn.Linear(256, 128)
        self.fc2 = nn.Linear(128, 64)
        self.fc3 = nn.Linear(64, 10)

    def forward(self, x):
        x = torch.flatten(x, 1)
        x = torch.relu(self.fc1(x))
        x = torch.relu(self.fc2(x))
        x = self.fc3(x)
        return x

# CNN Model
class CNN(nn.Module):
    def __init__(self):
        super(CNN, self).__init__()
        self.conv1 = nn.Conv2d(1, 32, 3, padding=2, stride=1)  # Added Stride
        self.conv2 = nn.Conv2d(32, 64, 3, padding=1, stride=1)
        self.fc1 = nn.Linear(32*7*7, 256)  # Filter size updated
        self.fc2 = nn.Linear(128, 10)
        self.dropout = nn.Dropout(0.5) # Added Dropout

    def forward(self, x):
        x = torch.relu(self.conv1(x))
        x = torch.max_pool2d(x, 2)
        x = torch.relu(self.conv2(x))
        x = torch.max_pool2d(x, 2)
        x = self.dropout(x)
        x = torch.flatten(x, 1)
        x = torch.relu(self.fc1(x))
        x = self.fc2(x)
        return x

# Training function
def train(model, criterion, optimizer, train_loader, epoch):
    model.train()
    running_loss = 0.0
    for batch_idx, (data, target) in enumerate(train_loader):
        optimizer.zero_grad()
        output = model(data)
        loss = criterion(output, target)
        loss.backward()
        optimizer.step()
        running_loss += loss.item()
    writer.add_scalar('training_loss', running_loss/len(train_loader), epoch)

# Function to Evaluate the Models
def evaluate(model, test_loader):
    model.eval()
    preds = []
    targets = []
    with torch.no_grad():
        for data, target in test_loader:
            output = model(data)
            preds.extend(torch.argmax(output, dim=1))
            targets.extend(target)
    accuracy = accuracy_score(targets, preds)
    precision = precision_score(targets, preds, average='macro')
    recall = recall_score(targets, preds, average='macro')
    cm = confusion_matrix(targets, preds)
    return accuracy, precision, recall, cm

mlp_model = MLP()
cnn_model = CNN()

criterion = nn.CrossEntropyLoss()
mlp_optimizer = optim.Adam(mlp_model.parameters(), lr=0.001)
cnn_optimizer = optim.Adam(cnn_model.parameters(), lr=0.001)

# Setting up the TensorBoard
writer = SummaryWriter()

# Training MLP with Epoch 5
for epoch in range(5):
    train(mlp_model, criterion, mlp_optimizer, train_loader, epoch)
    accuracy, precision, recall, cm = evaluate(mlp_model, test_loader)
    print("MLP Epoch {}: Accuracy: {:.4f}, Precision: {:.4f}, Recall: {:.4f}".format(epoch+1, accuracy, precision, recall))
    print("Confusion Matrix:\n", cm)

# Training CNN with Epoch 5
for epoch in range(5):
    train(cnn_model, criterion, cnn_optimizer, train_loader, epoch)
    accuracy, precision, recall, cm = evaluate(cnn_model, test_loader)
    print("CNN Epoch {}: Accuracy: {:.4f}, Precision: {:.4f}, Recall: {:.4f}".format(epoch+1, accuracy, precision, recall))
    print("Confusion Matrix:\n", cm)

# Evaluate MLP
mlp_accuracy, mlp_precision, mlp_recall, mlp_cm = evaluate(mlp_model, test_loader)
print("MLP Model:")
print("Accuracy:", mlp_accuracy)
print("Precision:", mlp_precision)
print("Recall:", mlp_recall)
print("Confusion Matrix:")
print(mlp_cm)

# Evaluate CNN
cnn_accuracy, cnn_precision, cnn_recall, cnn_cm = evaluate(cnn_model, test_loader)
print("\nCNN Model:")
print("Accuracy:", cnn_accuracy)
print("Precision:", cnn_precision)
print("Recall:", cnn_recall)
print("Confusion Matrix:")
print(cnn_cm)